# Powershell function that will connect to a modem via telnet and send the commands specified.
# Second portion will take a txt file with words in it and compare the words to a CSV file
# if any matches are found it will output the hashtable value of the word from the text file
# and then run the function, save the results, and also output results to a shell
# Originally created for connecting to RV50's but can handle any device that uses Telnet


# Function to send telnet commands to specified modem and save results into a txt file

Function Get-Telnet
{   Param (
        [Parameter(ValueFromPipeline=$true)]
        [String[]]$Commands = @("username","password"),
        [string]$RemoteHost = "127.0.0.1",
        [string]$Port = "23",
        [int]$WaitTime = 2000,
        [string]$OutputPath = "C:\telnettest.txt"
    )
    #Attach to the remote device, setup streaming requirements
    $Socket = New-Object System.Net.Sockets.TcpClient($RemoteHost, $Port)
    If ($Socket)
    {   $Stream = $Socket.GetStream()
        $Writer = New-Object System.IO.StreamWriter($Stream)
        $Buffer = New-Object System.Byte[] 1024 
        $Encoding = New-Object System.Text.AsciiEncoding

        #Now start issuing the commands
        ForEach ($Command in $Commands)
		{	Start-Sleep -Milliseconds $WaitTime
           $Writer.WriteLine($Command) 
            $Writer.Flush()
            Start-Sleep -Milliseconds $WaitTime
        }
        #All commands issued, but since the last command is usually going to be
        #the longest let's wait a little longer for it to finish
        Start-Sleep -Milliseconds ($WaitTime * 4)
        $Result = ""
        #Save all the results
        While($Stream.DataAvailable) 
        {   $Read = $Stream.Read($Buffer, 0, 1024) 
            $Result += ($Encoding.GetString($Buffer, 0, $Read))
        }
    }
    Else     
    {   $Result = "Unable to connect to host: $($RemoteHost):$Port"
    }
    #Done, now save the results to a file
    $Result | Out-File $OutputPath
}
#set some files as variables

$emailtxt = Get-Content -Path Email.txt
$matches = Get-Content -Path matches.txt
$matchesPath = "matches.txt"
$values = Import-Csv collector-lookup.csv

#Delete contents of the matches file then replace all TABS with spaces then reset the emailtxt variablemailtxte

Clear-Content $matchesPath
 ($emailtxt -replace ("`t", " ")) | Set-Content Email.txt
 $emailtxt = Get-Content -Path Email.txt
 
 #Nested FOR loops to split the emailfile into individual lines by the space character and add each line to an array.
 #Then compare every value in the "Collector" column of the csv 
 #Then write every matching word to the txt file matches.txt
Foreach ($line in $emailtxt)
{
    # Split words based on spaces and punctuation
    $array = $line.Split(" ")
    Foreach ($word in $array)
    { 
	if ($word -in $values.Collector)
        {
	    Add-Content $matchesPath $word
        }
    }
}

#update $matches value and output to screen
$matches = Get-Content -Path matches.txt
write-output "Most recent Power Outage:" $matches 
#add collector/modem/model as hashable with collector name as key
$colhash = Import-CSV collector-lookup.csv | Group-Object -AsHashtable -Property Collector

#set variable for the modem value of the value in matches.txt
$modemmatch= $colhash.$matches.modem
write-output "   "
write-output "   "
write-output "Associated Modem:" $colhash.$matches.modem

#ACTUALLY RUN THE SCRIPT LETS GO
Get-Telnet -Commands (Get-Content "commands.txt") -RemoteHost "$modemmatch" -OutputPath "telnettest.txt" -WaitTime 1000

#set variable for results txt and then output results to window
$telnetresults = Get-Content -Path telnettest.txt

write-output $telnetresults
Start-Sleep -Milliseconds 10000
